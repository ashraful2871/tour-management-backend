/* eslint-disable @typescript-eslint/no-explicit-any */
import PDFDocument from "pdfkit";
import AppError from "../../erroralpers/appError";

export interface IInvoiceData {
  bookingDate: Date;
  transactionId: string;
  userName: string;
  tourTitle: string;
  guestCount: number;
  totalAmount: number;
}

export const generaPDF = async (
  invoiceData: IInvoiceData
): Promise<Buffer<ArrayBufferLike>> => {
  try {
    return new Promise((resolve, reject) => {
      const doc = new PDFDocument({ size: "A4", margin: 50 });

      const buffer: Uint8Array[] = [];
      doc.on("data", (chunk) => buffer.push(chunk));
      doc.on("end", () => resolve(Buffer.concat(buffer)));
      doc.on("error", (err) => reject(err));

      const primaryColor = "#00a859";
      const darkText = "#2c3e50";
      // Header
      doc
        .fillColor(primaryColor)
        .fontSize(26)
        .font("Helvetica-Bold")
        .text("Invoice", { align: "left" });

      doc
        .fontSize(12)
        .fillColor("#666")
        .font("Helvetica")
        .text("Generated by TravelCo", { align: "left" });

      doc.moveDown(1.5);

      // Top Grid: Billed To & Invoice Details
      const startY = doc.y;
      doc
        .fontSize(10)
        .fillColor(darkText)
        .font("Helvetica-Bold")
        .text("Billed To:", 50, startY)
        .font("Helvetica")
        .text(invoiceData.userName, 50)
        .text("Email: support@example.com", 50)
        .text("Phone: +880 1234567890", 50);

      doc
        .font("Helvetica-Bold")
        .text("Invoice Info:", 300, startY)
        .font("Helvetica")
        .text(`Invoice ID: ${invoiceData.transactionId}`, 300)
        .text(
          `Booking Date: ${invoiceData.bookingDate.toLocaleDateString()}`,
          300
        )
        .text(
          `Due Date: ${new Date(
            invoiceData.bookingDate.getTime() + 7 * 86400000
          ).toLocaleDateString()}`,
          300
        ); // +7 days

      doc.moveDown(2);

      // Booking Information
      doc
        .fontSize(12)
        .fillColor(darkText)
        .font("Helvetica-Bold")
        .text("Booking Summary", { underline: true });

      doc.moveDown(0.5);

      doc
        .font("Helvetica")
        .fillColor("#333")
        .fontSize(11)
        .text("Tour Title:", { continued: true })
        .font("Helvetica-Bold")
        .text(` ${invoiceData.tourTitle}`);

      doc
        .font("Helvetica")
        .text("Guest Count:", { continued: true })
        .font("Helvetica-Bold")
        .text(` ${invoiceData.guestCount}`);

      // Divider Line
      doc
        .moveDown(1)
        .strokeColor("#dddddd")
        .lineWidth(1)
        .moveTo(50, doc.y)
        .lineTo(doc.page.width - 50, doc.y)
        .stroke();

      doc.moveDown(1.5);

      // Total Summary Box
      const boxWidth = 300;
      const boxHeight = 50;
      const startX = doc.page.width / 2 - boxWidth / 2;
      const boxY = doc.y;

      doc
        .rect(startX, boxY, boxWidth, boxHeight)
        .fill("#e9f5ff")
        .stroke("#00a859");

      doc
        .fillColor("#000")
        .font("Helvetica-Bold")
        .fontSize(16)
        .text(
          `Total Amount: $${invoiceData.totalAmount.toFixed(2)}`,
          startX + 20,
          boxY + 15
        );

      doc.moveDown(3);

      // Footer
      doc
        .fontSize(12)
        .fillColor("#2c3e50")
        .font("Helvetica-Oblique")
        .text("Thank you for booking with TravelCo!", { align: "center" });

      doc
        .fontSize(10)
        .fillColor("#888")
        .font("Helvetica")
        .text("For any queries, contact support@example.com", {
          align: "center",
        });

      doc.end();
    });
  } catch (error: any) {
    console.log(error);
    throw new AppError(401, `pdf Generate error:  ${error.message}`);
  }
};
